<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Load Board & Driver Portal</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            padding: 15px;
        }
        
        .container {
            max-width: 1600px;
            margin: 0 auto;
            background: white;
            border-radius: 25px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.15);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .header h1 { font-size: 2.5em; margin-bottom: 5px; font-weight: 300; }
        .header p { font-size: 1.1em; opacity: 0.9; }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
            background: rgba(255,255,255,0.15);
            padding: 12px 20px;
            border-radius: 25px;
        }
        
        .btn-logout {
            background: rgba(231, 76, 60, 0.8);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-logout:hover { background: rgba(192, 57, 43, 0.9); }
        
        /* Login Modal */
        .modal-overlay {
            display: flex;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .login-modal {
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 25px 50px rgba(0,0,0,0.3);
            width: 90%;
            max-width: 450px;
            animation: slideUp 0.3s ease;
        }
        
        @keyframes slideUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .login-header { text-align: center; margin-bottom: 30px; }
        .login-header h2 { color: #2c3e50; font-size: 2em; margin-bottom: 10px; }
        .login-header p { color: #7f8c8d; font-size: 1.1em; }
        
        .login-tabs {
            display: flex;
            margin-bottom: 25px;
            background: #f8f9fa;
            border-radius: 10px;
            padding: 4px;
        }
        
        .login-tab {
            flex: 1;
            padding: 12px;
            text-align: center;
            background: transparent;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            color: #7f8c8d;
            transition: all 0.3s ease;
        }
        
        .login-tab.active { background: #3498db; color: white; }
        
        .login-form { display: none; }
        .login-form.active { display: block; }
        
        .form-group { margin-bottom: 20px; }
        .form-group label { display: block; margin-bottom: 8px; font-weight: 600; color: #2c3e50; }
        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 15px;
            border: 2px solid #ddd;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 10px rgba(52, 152, 219, 0.2);
        }
        
        .btn-login {
            width: 100%;
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 15px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(52, 152, 219, 0.3);
        }
        
        .main-content { padding: 30px; }
        
        .stats-bar {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }
        
        .stat-card.earnings { background: linear-gradient(135deg, #00b894 0%, #00a085 100%); }
        .stat-card.pending { background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%); }
        
        .stat-value { font-size: 2.2em; font-weight: bold; margin-bottom: 5px; }
        .stat-label { font-size: 0.9em; opacity: 0.9; }
        
        .tabs {
            display: flex;
            margin-bottom: 30px;
            background: #f8f9fa;
            border-radius: 12px;
            padding: 6px;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .tab {
            flex: 1;
            padding: 15px 20px;
            text-align: center;
            background: transparent;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            color: #7f8c8d;
        }
        
        .tab.active {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
            transform: translateY(-2px);
        }
        
        .content-section { display: none; }
        .content-section.active { display: block; animation: fadeIn 0.3s ease; }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .add-load-section {
            background: linear-gradient(135deg, #00b894 0%, #00a085 100%);
            padding: 30px;
            border-radius: 20px;
            margin-bottom: 30px;
            color: white;
            box-shadow: 0 10px 30px rgba(0, 184, 148, 0.2);
        }
        
        .add-load-section h3 { font-size: 1.8em; margin-bottom: 20px; text-align: center; }
        
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
        }
        
        .add-load-section .form-group input, 
        .add-load-section .form-group select, 
        .add-load-section .form-group textarea {
            background: rgba(255,255,255,0.15);
            color: white;
            border: 2px solid rgba(255,255,255,0.3);
            backdrop-filter: blur(10px);
        }
        
        .add-load-section .form-group input::placeholder, 
        .add-load-section .form-group textarea::placeholder { color: rgba(255,255,255,0.8); }
        
        .add-load-section .form-group select option { background: #00a085; color: white; }
        
        .btn-primary {
            background: rgba(255,255,255,0.2);
            color: white;
            border: 2px solid rgba(255,255,255,0.4);
            padding: 15px 30px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            display: block;
            margin: 25px auto 0;
            min-width: 200px;
        }
        
        .btn-primary:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }
        
        .load-board { display: grid; gap: 25px; }
        
        .load-card {
            background: white;
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border-left: 6px solid #3498db;
            transition: all 0.3s ease;
        }
        
        .load-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }
        
        .load-card.my-load {
            border-left-color: #00b894;
            background: linear-gradient(135deg, rgba(0, 184, 148, 0.05), rgba(255,255,255,1));
        }
        
        .load-card.available { border-left-color: #f39c12; }
        
        .load-header {
            display: grid;
            grid-template-columns: 2fr auto auto;
            gap: 25px;
            align-items: start;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid #ecf0f1;
        }
        
        .event-info h3 { color: #2c3e50; font-size: 1.6em; margin-bottom: 8px; font-weight: 600; }
        .event-details { color: #7f8c8d; font-size: 1em; line-height: 1.4; }
        
        .load-value {
            text-align: center;
            background: linear-gradient(135deg, #00b894 0%, #00a085 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            min-width: 140px;
            box-shadow: 0 5px 15px rgba(0, 184, 148, 0.3);
        }
        
        .load-value .amount { font-size: 2em; font-weight: bold; display: block; margin-bottom: 5px; }
        
        .driver-pay {
            text-align: center;
            background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            min-width: 140px;
            box-shadow: 0 5px 15px rgba(253, 203, 110, 0.3);
        }
        
        .driver-pay .amount { font-size: 2em; font-weight: bold; display: block; margin-bottom: 5px; }
        
        .load-details {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr;
            gap: 25px;
            align-items: start;
        }
        
        .status-badge {
            display: inline-block;
            padding: 6px 15px;
            border-radius: 25px;
            font-size: 0.85em;
            font-weight: 600;
            margin-bottom: 15px;
            text-transform: uppercase;
        }
        
        .status-available { background: #f39c12; color: white; }
        .status-assigned { background: #3498db; color: white; }
        .status-my-load { background: #00b894; color: white; }
        .status-completed { background: #27ae60; color: white; }
        
        .driver-section h4 { color: #2c3e50; margin-bottom: 10px; font-size: 1.1em; }
        
        .driver-select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #ddd;
            border-radius: 8px;
            background: white;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .driver-select:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 10px rgba(52, 152, 219, 0.2);
        }
        
        .load-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .btn-accept, .btn-complete, .btn-release, .btn-delete {
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-accept { background: #3498db; color: white; }
        .btn-complete { background: #27ae60; color: white; }
        .btn-release { background: #e74c3c; color: white; }
        .btn-delete { background: #c0392b; color: white; }
        
        .btn-accept:hover, .btn-complete:hover, .btn-release:hover, .btn-delete:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        .empty-state { text-align: center; padding: 60px 20px; color: #7f8c8d; }
        .empty-state h3 { font-size: 1.8em; margin-bottom: 15px; color: #95a5a6; }
        
        .earnings-breakdown {
            background: white;
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .earnings-breakdown h3 {
            color: #2c3e50;
            font-size: 1.8em;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .earnings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .earning-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border-left: 4px solid #3498db;
        }
        
        .earning-item.completed {
            border-left-color: #27ae60;
            background: rgba(39, 174, 96, 0.1);
        }
        
        .earning-item.potential {
            border-left-color: #f39c12;
            background: rgba(243, 156, 18, 0.1);
        }
        
        .earning-label { font-weight: 600; color: #2c3e50; }
        .earning-amount { font-size: 1.4em; font-weight: bold; color: #2c3e50; }
        
        .next-payday {
            text-align: center;
            background: linear-gradient(135deg, #00b894 0%, #00a085 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            font-size: 1.2em;
            font-weight: 600;
        }
        
        .payroll-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
        }
        
        .driver-card {
            background: linear-gradient(135deg, #a29bfe 0%, #6c5ce7 100%);
            color: white;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(108, 92, 231, 0.2);
            transition: transform 0.3s ease;
        }
        
        .driver-card:hover { transform: translateY(-5px); }
        
        .driver-name { font-size: 1.8em; font-weight: bold; margin-bottom: 15px; }
        .total-earned { font-size: 3em; font-weight: bold; margin-bottom: 10px; }
        .load-count { opacity: 0.9; font-size: 1em; margin-bottom: 20px; }
        
        .pay-date {
            background: rgba(255,255,255,0.2);
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 0.9em;
            margin-bottom: 20px;
        }
        
        .drivers-list-section {
            background: white;
            border-radius: 20px;
            padding: 30px;
            margin-top: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .drivers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 25px;
        }

        .driver-management-card {
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            position: relative;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(116, 185, 255, 0.2);
        }

        .driver-management-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(116, 185, 255, 0.3);
        }

        .driver-avatar {
            width: 60px;
            height: 60px;
            background: rgba(255,255,255,0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.4em;
            font-weight: bold;
            margin-bottom: 15px;
            backdrop-filter: blur(10px);
        }

        .driver-name {
            font-size: 1.4em;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .driver-details {
            opacity: 0.9;
            margin-bottom: 15px;
            line-height: 1.4;
        }

        .driver-stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            padding: 10px 0;
            border-top: 1px solid rgba(255,255,255,0.2);
            border-bottom: 1px solid rgba(255,255,255,0.2);
        }

        .driver-stat {
            text-align: center;
        }

        .driver-stat .value {
            font-size: 1.3em;
            font-weight: bold;
            display: block;
        }

        .driver-stat .label {
            font-size: 0.8em;
            opacity: 0.8;
        }

        .driver-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .btn-edit, .btn-remove {
            background: rgba(255,255,255,0.2);
            color: white;
            border: 2px solid rgba(255,255,255,0.3);
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-edit:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-1px);
        }

        .btn-remove {
            background: rgba(231, 76, 60, 0.6);
            border-color: rgba(231, 76, 60, 0.8);
        }

        .btn-remove:hover {
            background: rgba(192, 57, 43, 0.8);
            transform: translateY(-1px);
        }
            .header { flex-direction: column; text-align: center; }
            .load-header { grid-template-columns: 1fr; text-align: center; gap: 15px; }
            .load-details { grid-template-columns: 1fr; gap: 20px; }
            .stats-bar { grid-template-columns: repeat(2, 1fr); }
            .login-modal { margin: 20px; width: calc(100% - 40px); }
            .form-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <!-- Login Modal -->
    <div id="loginModal" class="modal-overlay">
        <div class="login-modal">
            <div class="login-header">
                <h2>ðŸš› Load Board Portal</h2>
                <p>Choose your access level to continue</p>
            </div>
            
            <div class="login-tabs">
                <button class="login-tab active" id="driverTab">ðŸ‘¨â€ðŸ’¼ Driver Portal</button>
                <button class="login-tab" id="managerTab">ðŸ¢ Manager</button>
            </div>

            <!-- Driver Login Form -->
            <div id="driverLoginForm" class="login-form active">
                <div class="form-group">
                    <label>Select Your Driver Account</label>
                    <select id="driverSelect" required>
                        <option value="">Choose your driver account...</option>
                        <option value="Mike Johnson">Mike Johnson</option>
                        <option value="Sarah Davis">Sarah Davis</option>
                        <option value="Tony Rodriguez">Tony Rodriguez</option>
                        <option value="Chris Wilson">Chris Wilson</option>
                        <option value="Alex Thompson">Alex Thompson</option>
                        <option value="Jennifer Lee">Jennifer Lee</option>
                        <option value="David Brown">David Brown</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Driver ID (use: 1234)</label>
                    <input type="password" id="driverPassword" placeholder="Enter your driver ID" required>
                </div>
                <button type="button" class="btn-login" onclick="driverLogin()">ðŸš€ Access Driver Portal</button>
            </div>

            <!-- Manager Login Form -->
            <div id="managerLoginForm" class="login-form">
                <div class="form-group">
                    <label>Manager Username (use: admin)</label>
                    <input type="text" id="managerUsername" placeholder="Enter manager username" required>
                </div>
                <div class="form-group">
                    <label>Manager Password (use: admin123)</label>
                    <input type="password" id="managerPassword" placeholder="Enter password" required>
                </div>
                <button type="button" class="btn-login" onclick="managerLogin()">ðŸ” Access Management Dashboard</button>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="header">
            <div>
                <h1 id="headerTitle">Load Board Portal</h1>
                <p id="headerSubtitle">Delivery management system</p>
            </div>
            <div style="display: flex; align-items: center; gap: 20px;">
                <div class="user-info">
                    <div id="userName">Please Login</div>
                    <div style="font-size: 0.8em; opacity: 0.8;" id="userRole">-</div>
                </div>
                <button class="btn-logout" onclick="logout()">Logout</button>
            </div>
        </div>

        <div class="main-content">
            <div class="stats-bar" id="statsBar">
                <div class="stat-card">
                    <div class="stat-value">0</div>
                    <div class="stat-label">Please Login</div>
                </div>
            </div>

            <!-- Driver Tabs -->
            <div id="driverTabs" class="tabs" style="display: none;">
                <button class="tab active" onclick="switchTab('available')">ðŸ” Available Loads</button>
                <button class="tab" onclick="switchTab('myloads')">ðŸ“¦ My Loads</button>
                <button class="tab" onclick="switchTab('earnings')">ðŸ’° My Earnings</button>
            </div>

            <!-- Manager Tabs -->
            <div id="managerTabs" class="tabs" style="display: none;">
                <button class="tab active" onclick="switchTab('loadboard')">ðŸ“‹ Load Board</button>
                <button class="tab" onclick="switchTab('payroll')">ðŸ’° Driver Payroll</button>
                <button class="tab" onclick="switchTab('drivers')">ðŸ‘¥ Manage Drivers</button>
                <button class="tab" onclick="switchTab('addload')">âž• Add New Load</button>
            </div>

            <!-- Driver Content Sections -->
            <div id="available" class="content-section">
                <div class="load-board" id="availableLoadsContainer"></div>
            </div>

            <div id="myloads" class="content-section">
                <div class="load-board" id="myLoadsContainer"></div>
            </div>

            <div id="earnings" class="content-section">
                <div class="earnings-breakdown">
                    <h3>My Earnings Breakdown</h3>
                    <div class="earnings-grid" id="earningsGrid"></div>
                    <div class="next-payday" id="nextPayday">Next Payday: Wednesday</div>
                </div>
            </div>

            <!-- Manager Content Sections -->
            <div id="drivers" class="content-section">
                <div class="add-load-section">
                    <h3>Add New Driver</h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Driver Name *</label>
                            <input type="text" id="newDriverName" placeholder="Enter driver's full name" required>
                        </div>
                        <div class="form-group">
                            <label>Driver ID *</label>
                            <input type="text" id="newDriverId" placeholder="Enter unique driver ID" required>
                        </div>
                        <div class="form-group">
                            <label>Phone Number</label>
                            <input type="tel" id="newDriverPhone" placeholder="(555) 123-4567">
                        </div>
                        <div class="form-group">
                            <label>Email Address</label>
                            <input type="email" id="newDriverEmail" placeholder="driver@email.com">
                        </div>
                        <div class="form-group">
                            <label>License Number</label>
                            <input type="text" id="newDriverLicense" placeholder="CDL or License #">
                        </div>
                        <div class="form-group">
                            <label>Start Date</label>
                            <input type="date" id="newDriverStartDate">
                        </div>
                    </div>
                    <button class="btn-primary" onclick="addDriver()">Add Driver to System</button>
                </div>

                <div class="drivers-list-section">
                    <h3 style="color: #2c3e50; font-size: 1.8em; margin-bottom: 25px; text-align: center;">Current Drivers</h3>
                    <div class="drivers-grid" id="driversGrid"></div>
                </div>
            </div>

            <div id="addload" class="content-section">
                <div class="add-load-section">
                    <h3>Add New Delivery Load</h3>
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Customer Name *</label>
                            <input type="text" id="customerName" placeholder="Enter customer name" required>
                        </div>
                        <div class="form-group">
                            <label>Event Date *</label>
                            <input type="date" id="eventDate" required>
                        </div>
                        <div class="form-group">
                            <label>Event Type</label>
                            <select id="eventType">
                                <option value="">Select event type</option>
                                <option value="Wedding">Wedding</option>
                                <option value="Corporate">Corporate Event</option>
                                <option value="Birthday">Birthday Party</option>
                                <option value="Graduation">Graduation Party</option>
                                <option value="Anniversary">Anniversary</option>
                                <option value="Baby Shower">Baby Shower</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Load Value ($) *</label>
                            <input type="number" id="loadValue" placeholder="Enter total load value" min="0" step="0.01" required>
                        </div>
                        <div class="form-group">
                            <label>Delivery Address *</label>
                            <input type="text" id="deliveryAddress" placeholder="Enter complete delivery address" required>
                        </div>
                        <div class="form-group">
                            <label>Setup Size</label>
                            <select id="setupSize">
                                <option value="">Select setup size</option>
                                <option value="Small">Small</option>
                                <option value="Medium">Medium</option>
                                <option value="Large">Large</option>
                                <option value="X-Large">X-Large</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-grid" style="margin-top: 20px;">
                        <div class="form-group" style="grid-column: 1 / -1;">
                            <label>Special Instructions</label>
                            <textarea id="specialInstructions" rows="3" placeholder="Any special delivery, setup, or access instructions"></textarea>
                        </div>
                    </div>
                    <button class="btn-primary" onclick="addLoad()">Add Load to Board</button>
                </div>
            </div>

            <div id="loadboard" class="content-section">
                <div class="load-board" id="loadBoardContainer"></div>
            </div>

            <div id="payroll" class="content-section">
                <div class="payroll-section" id="payrollContainer"></div>
            </div>
        </div>
    </div>

    <script>
        // Global state
        let currentUser = null;
        let userRole = null;
        let loads = [];
        let drivers = [
            { name: 'Mike Johnson', id: '1234', avatar: 'MJ', phone: '(555) 123-4567', email: 'mike.johnson@company.com', license: 'CDL-A-12345', startDate: '2023-01-15' },
            { name: 'Sarah Davis', id: '1234', avatar: 'SD', phone: '(555) 234-5678', email: 'sarah.davis@company.com', license: 'CDL-A-23456', startDate: '2023-02-20' },
            { name: 'Tony Rodriguez', id: '1234', avatar: 'TR', phone: '(555) 345-6789', email: 'tony.rodriguez@company.com', license: 'CDL-A-34567', startDate: '2023-03-10' },
            { name: 'Chris Wilson', id: '1234', avatar: 'CW', phone: '(555) 456-7890', email: 'chris.wilson@company.com', license: 'CDL-A-45678', startDate: '2023-04-05' },
            { name: 'Alex Thompson', id: '1234', avatar: 'AT', phone: '(555) 567-8901', email: 'alex.thompson@company.com', license: 'CDL-A-56789', startDate: '2023-05-12' },
            { name: 'Jennifer Lee', id: '1234', avatar: 'JL', phone: '(555) 678-9012', email: 'jennifer.lee@company.com', license: 'CDL-A-67890', startDate: '2023-06-18' },
            { name: 'David Brown', id: '1234', avatar: 'DB', phone: '(555) 789-0123', email: 'david.brown@company.com', license: 'CDL-A-78901', startDate: '2023-07-22' }
        ];
        let nextLoadId = 100;

        // Initialize with sample data
        function initializeSampleData() {
            const sampleLoads = [
                {
                    id: 1,
                    customer: 'Smith-Johnson Wedding',
                    eventDate: getFormattedDate(1),
                    eventType: 'Wedding',
                    loadValue: 3200,
                    deliveryAddress: '1234 Oak Ridge Country Club, Westfield',
                    setupSize: 'X-Large',
                    specialInstructions: 'Outdoor ceremony setup. Tables, chairs, dance floor, and lighting. Setup must be complete by 2:00 PM for 4:00 PM ceremony.',
                    status: 'assigned',
                    assignedDriver: 'Mike Johnson',
                    completed: false
                },
                {
                    id: 2,
                    customer: 'TechCorp Annual Meeting',
                    eventDate: getFormattedDate(2),
                    eventType: 'Corporate',
                    loadValue: 2800,
                    deliveryAddress: '5678 Business Center Drive, Suite 400, Downtown',
                    setupSize: 'Large',
                    specialInstructions: 'Corporate AV setup with projectors, screens, and staging.',
                    status: 'completed',
                    assignedDriver: 'Sarah Davis',
                    completed: true
                },
                {
                    id: 3,
                    customer: 'Martinez 50th Birthday',
                    eventDate: getFormattedDate(3),
                    eventType: 'Birthday',
                    loadValue: 1850,
                    deliveryAddress: '9101 Maple Street, Residential District',
                    setupSize: 'Medium',
                    specialInstructions: 'Backyard party setup. Use side gate access.',
                    status: 'available',
                    assignedDriver: '',
                    completed: false
                },
                {
                    id: 4,
                    customer: 'University Graduation Party',
                    eventDate: getFormattedDate(4),
                    eventType: 'Graduation',
                    loadValue: 2400,
                    deliveryAddress: '2468 College Avenue, University District',
                    setupSize: 'Large',
                    specialInstructions: 'Setup for 80 guests. Include dance floor and DJ equipment.',
                    status: 'assigned',
                    assignedDriver: 'Tony Rodriguez',
                    completed: false
                },
                {
                    id: 5,
                    customer: 'Anderson Baby Shower',
                    eventDate: getFormattedDate(5),
                    eventType: 'Baby Shower',
                    loadValue: 950,
                    deliveryAddress: '1357 Pine Hills Drive, Suburbia',
                    setupSize: 'Small',
                    specialInstructions: 'Indoor setup. Pink and white theme decorations.',
                    status: 'available',
                    assignedDriver: '',
                    completed: false
                }
            ];
            
            loads = [...sampleLoads];
        }

        function getFormattedDate(daysFromNow) {
            const date = new Date();
            date.setDate(date.getDate() + daysFromNow);
            return date.toISOString().split('T')[0];
        }

        function getNextWednesday() {
            const today = new Date();
            const daysUntilWednesday = (3 - today.getDay() + 7) % 7 || 7;
            const nextWednesday = new Date(today);
            nextWednesday.setDate(today.getDate() + daysUntilWednesday);
            return nextWednesday.toLocaleDateString('en-US', { 
                weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' 
            });
        }

        // Login functionality
        document.getElementById('driverTab').addEventListener('click', function() {
            document.querySelectorAll('.login-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.login-form').forEach(f => f.classList.remove('active'));
            this.classList.add('active');
            document.getElementById('driverLoginForm').classList.add('active');
        });

        document.getElementById('managerTab').addEventListener('click', function() {
            document.querySelectorAll('.login-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.login-form').forEach(f => f.classList.remove('active'));
            this.classList.add('active');
            document.getElementById('managerLoginForm').classList.add('active');
        });

        function driverLogin() {
            const selectedDriver = document.getElementById('driverSelect').value;
            const driverId = document.getElementById('driverPassword').value;
            
            if (!selectedDriver || !driverId) {
                alert('Please select a driver and enter ID');
                return;
            }
            
            const driver = drivers.find(d => d.name === selectedDriver && d.id === driverId);
            
            if (driver) {
                loginUser(driver.name, 'driver', driver.avatar);
            } else {
                alert('Invalid credentials. Use driver ID: 1234');
            }
        }

        function managerLogin() {
            const username = document.getElementById('managerUsername').value;
            const password = document.getElementById('managerPassword').value;
            
            if (!username || !password) {
                alert('Please enter username and password');
                return;
            }
            
            if (username === 'admin' && password === 'admin123') {
                loginUser('Manager', 'manager', 'MG');
            } else {
                alert('Invalid credentials. Use: admin / admin123');
            }
        }

        function loginUser(name, role, avatar) {
            currentUser = name;
            userRole = role;
            
            // Hide login modal
            document.getElementById('loginModal').style.display = 'none';
            
            // Update header
            document.getElementById('userName').textContent = name;
            document.getElementById('userRole').textContent = role === 'driver' ? 'Driver' : 'Manager';
            
            if (role === 'driver') {
                document.getElementById('headerTitle').textContent = 'Driver Portal';
                document.getElementById('headerSubtitle').textContent = 'View loads and track earnings';
                document.getElementById('driverTabs').style.display = 'flex';
                document.getElementById('managerTabs').style.display = 'none';
                switchTab('available');
            } else {
                document.getElementById('headerTitle').textContent = 'Management Dashboard';
                document.getElementById('headerSubtitle').textContent = 'Manage loads and drivers';
                document.getElementById('managerTabs').style.display = 'flex';
                document.getElementById('driverTabs').style.display = 'none';
                switchTab('loadboard');
            }
            
            updateDisplay();
        }

        function logout() {
            currentUser = null;
            userRole = null;
            document.getElementById('loginModal').style.display = 'flex';
            
            // Reset forms
            document.getElementById('driverSelect').value = '';
            document.getElementById('driverPassword').value = '';
            document.getElementById('managerUsername').value = '';
            document.getElementById('managerPassword').value = '';
            
            // Reset header
            document.getElementById('headerTitle').textContent = 'Load Board Portal';
            document.getElementById('headerSubtitle').textContent = 'Delivery management system';
            document.getElementById('userName').textContent = 'Please Login';
            document.getElementById('userRole').textContent = '-';
            
            // Hide tabs
            document.getElementById('driverTabs').style.display = 'none';
            document.getElementById('managerTabs').style.display = 'none';
            
            updateDisplay();
        }

        function switchTab(tabName) {
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            document.getElementById(tabName).classList.add('active');
            
            // Find and activate the corresponding tab button
            const tabButtons = document.querySelectorAll('.tab');
            tabButtons.forEach(button => {
                if (button.textContent.includes('Available') && tabName === 'available') button.classList.add('active');
                if (button.textContent.includes('My Loads') && tabName === 'myloads') button.classList.add('active');
                if (button.textContent.includes('My Earnings') && tabName === 'earnings') button.classList.add('active');
                if (button.textContent.includes('Load Board') && tabName === 'loadboard') button.classList.add('active');
                if (button.textContent.includes('Payroll') && tabName === 'payroll') button.classList.add('active');
                if (button.textContent.includes('Manage Drivers') && tabName === 'drivers') button.classList.add('active');
                if (button.textContent.includes('Add New') && tabName === 'addload') button.classList.add('active');
            });
            
            updateDisplay();
        }

        function updateDisplay() {
            updateStatsBar();
            
            if (userRole === 'driver') {
                updateDriverViews();
            } else if (userRole === 'manager') {
                updateManagerViews();
            }
        }

        function updateStatsBar() {
            if (!currentUser) {
                document.getElementById('statsBar').innerHTML = `
                    <div class="stat-card">
                        <div class="stat-value">0</div>
                        <div class="stat-label">Please Login</div>
                    </div>
                `;
                return;
            }
            
            if (userRole === 'driver') {
                const myLoads = loads.filter(load => load.assignedDriver === currentUser);
                const completedLoads = myLoads.filter(load => load.completed);
                const availableLoads = loads.filter(load => load.status === 'available');
                const potentialEarnings = myLoads.reduce((sum, load) => sum + (load.loadValue * 0.20), 0);
                const completedEarnings = completedLoads.reduce((sum, load) => sum + (load.loadValue * 0.20), 0);

                document.getElementById('statsBar').innerHTML = `
                    <div class="stat-card">
                        <div class="stat-value">${availableLoads.length}</div>
                        <div class="stat-label">Available Loads</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${myLoads.length}</div>
                        <div class="stat-label">My Assigned Loads</div>
                    </div>
                    <div class="stat-card pending">
                        <div class="stat-value">$${potentialEarnings.toLocaleString()}</div>
                        <div class="stat-label">Potential Earnings</div>
                    </div>
                    <div class="stat-card earnings">
                        <div class="stat-value">$${completedEarnings.toLocaleString()}</div>
                        <div class="stat-label">Completed Earnings</div>
                    </div>
                `;
            } else {
                const assignedLoads = loads.filter(load => load.assignedDriver);
                const totalValue = loads.reduce((sum, load) => sum + load.loadValue, 0);
                const totalDriverPay = loads.reduce((sum, load) => sum + (load.loadValue * 0.20), 0);
                const uniqueDrivers = new Set(assignedLoads.map(load => load.assignedDriver)).size;

                document.getElementById('statsBar').innerHTML = `
                    <div class="stat-card">
                        <div class="stat-value">${loads.length}</div>
                        <div class="stat-label">Total Loads</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${assignedLoads.length}</div>
                        <div class="stat-label">Assigned Loads</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">$${totalValue.toLocaleString()}</div>
                        <div class="stat-label">Total Load Value</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">$${totalDriverPay.toLocaleString()}</div>
                        <div class="stat-label">Total Driver Pay</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${uniqueDrivers}</div>
                        <div class="stat-label">Active Drivers</div>
                    </div>
                `;
            }
        }

        function updateDriverViews() {
            updateAvailableLoads();
            updateMyLoads();
            updateEarnings();
        }

        function updateAvailableLoads() {
            const availableLoads = loads.filter(load => load.status === 'available');
            const container = document.getElementById('availableLoadsContainer');
            
            if (availableLoads.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>No available loads</h3>
                        <p>Check back later for new delivery opportunities</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = availableLoads.map(load => `
                <div class="load-card available">
                    <div class="load-header">
                        <div class="event-info">
                            <div class="status-badge status-available">Available</div>
                            <h3>${load.customer}</h3>
                            <div class="event-details">
                                <div><strong>Date:</strong> ${formatDate(load.eventDate)}</div>
                                <div><strong>Type:</strong> ${load.eventType}</div>
                                <div><strong>Size:</strong> ${load.setupSize}</div>
                                <div><strong>Address:</strong> ${load.deliveryAddress}</div>
                            </div>
                        </div>
                        <div class="load-value">
                            <span class="amount">$${load.loadValue.toLocaleString()}</span>
                            <div class="label">Load Value</div>
                        </div>
                        <div class="driver-pay">
                            <span class="amount">$${(load.loadValue * 0.20).toLocaleString()}</span>
                            <div class="label">Your Pay</div>
                        </div>
                    </div>
                    <div class="load-details">
                        <div>
                            <h4>Special Instructions</h4>
                            <p>${load.specialInstructions || 'No special instructions provided.'}</p>
                        </div>
                        <div></div>
                        <div class="load-actions">
                            <button class="btn-accept" onclick="acceptLoad(${load.id})">Accept Load</button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function updateDriversManagement() {
            const container = document.getElementById('driversGrid');
            
            container.innerHTML = drivers.map(driver => {
                const driverLoads = loads.filter(load => load.assignedDriver === driver.name);
                const completedLoads = driverLoads.filter(load => load.completed);
                const totalEarned = completedLoads.reduce((sum, load) => sum + (load.loadValue * 0.20), 0);
                
                return `
                    <div class="driver-management-card">
                        <div class="driver-avatar">${driver.avatar}</div>
                        <div class="driver-name">${driver.name}</div>
                        <div class="driver-details">
                            <div><strong>ID:</strong> ${driver.id}</div>
                            <div><strong>Phone:</strong> ${driver.phone || 'Not provided'}</div>
                            <div><strong>Email:</strong> ${driver.email || 'Not provided'}</div>
                            <div><strong>License:</strong> ${driver.license || 'Not provided'}</div>
                            <div><strong>Start Date:</strong> ${driver.startDate ? formatDate(driver.startDate) : 'Not provided'}</div>
                        </div>
                        <div class="driver-stats">
                            <div class="driver-stat">
                                <span class="value">${driverLoads.length}</span>
                                <span class="label">Assigned</span>
                            </div>
                            <div class="driver-stat">
                                <span class="value">${completedLoads.length}</span>
                                <span class="label">Completed</span>
                            </div>
                            <div class="driver-stat">
                                <span class="value">${totalEarned.toLocaleString()}</span>
                                <span class="label">Earned</span>
                            </div>
                        </div>
                        <div class="driver-actions">
                            <button class="btn-edit" onclick="editDriver('${driver.name}')">âœï¸ Edit</button>
                            <button class="btn-remove" onclick="removeDriver('${driver.name}')">ðŸ—‘ï¸ Remove</button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function updateMyLoads() {
            const myLoads = loads.filter(load => load.assignedDriver === currentUser);
            const container = document.getElementById('myLoadsContainer');
            
            if (myLoads.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>No assigned loads</h3>
                        <p>Visit Available Loads to find new opportunities</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = myLoads.map(load => `
                <div class="load-card my-load">
                    <div class="load-header">
                        <div class="event-info">
                            <div class="status-badge ${load.completed ? 'status-completed' : 'status-my-load'}">${load.completed ? 'Completed' : 'My Load'}</div>
                            <h3>${load.customer}</h3>
                            <div class="event-details">
                                <div><strong>Date:</strong> ${formatDate(load.eventDate)}</div>
                                <div><strong>Type:</strong> ${load.eventType}</div>
                                <div><strong>Size:</strong> ${load.setupSize}</div>
                                <div><strong>Address:</strong> ${load.deliveryAddress}</div>
                            </div>
                        </div>
                        <div class="load-value">
                            <span class="amount">$${load.loadValue.toLocaleString()}</span>
                            <div class="label">Load Value</div>
                        </div>
                        <div class="driver-pay">
                            <span class="amount">$${(load.loadValue * 0.20).toLocaleString()}</span>
                            <div class="label">Your Pay</div>
                        </div>
                    </div>
                    <div class="load-details">
                        <div>
                            <h4>Special Instructions</h4>
                            <p>${load.specialInstructions || 'No special instructions provided.'}</p>
                        </div>
                        <div></div>
                        <div class="load-actions">
                            ${!load.completed ? `
                                <button class="btn-complete" onclick="completeLoad(${load.id})">Mark Complete</button>
                                <button class="btn-release" onclick="releaseLoad(${load.id})">Release Load</button>
                            ` : '<span style="color: #27ae60; font-weight: 600;">âœ“ Completed</span>'}
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function updateEarnings() {
            const allMyLoads = loads.filter(load => load.assignedDriver === currentUser);
            const completedLoads = allMyLoads.filter(load => load.completed);
            const pendingLoads = allMyLoads.filter(load => !load.completed);
            
            const completedEarnings = completedLoads.reduce((sum, load) => sum + (load.loadValue * 0.20), 0);
            const potentialEarnings = pendingLoads.reduce((sum, load) => sum + (load.loadValue * 0.20), 0);
            
            document.getElementById('earningsGrid').innerHTML = `
                <div class="earning-item completed">
                    <div class="earning-label">Completed Earnings</div>
                    <div class="earning-amount">$${completedEarnings.toLocaleString()}</div>
                </div>
                <div class="earning-item potential">
                    <div class="earning-label">Potential Earnings</div>
                    <div class="earning-amount">$${potentialEarnings.toLocaleString()}</div>
                </div>
                <div class="earning-item">
                    <div class="earning-label">Completed Loads</div>
                    <div class="earning-amount">${completedLoads.length}</div>
                </div>
                <div class="earning-item">
                    <div class="earning-label">Pending Loads</div>
                    <div class="earning-amount">${pendingLoads.length}</div>
                </div>
            `;
            
            document.getElementById('nextPayday').textContent = `Next Payday: ${getNextWednesday()}`;
        }

        function updateManagerViews() {
            updateLoadBoard();
            updatePayroll();
            updateDriversManagement();
        }

        function updateLoadBoard() {
            const container = document.getElementById('loadBoardContainer');
            
            if (loads.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>No loads in the system</h3>
                        <p>Add new loads using the "Add New Load" tab</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = loads.map(load => `
                <div class="load-card">
                    <div class="load-header">
                        <div class="event-info">
                            <div class="status-badge status-${load.status}">${load.status.charAt(0).toUpperCase() + load.status.slice(1)}</div>
                            <h3>${load.customer}</h3>
                            <div class="event-details">
                                <div><strong>Date:</strong> ${formatDate(load.eventDate)}</div>
                                <div><strong>Type:</strong> ${load.eventType}</div>
                                <div><strong>Size:</strong> ${load.setupSize}</div>
                                <div><strong>Address:</strong> ${load.deliveryAddress}</div>
                            </div>
                        </div>
                        <div class="load-value">
                            <span class="amount">$${load.loadValue.toLocaleString()}</span>
                            <div class="label">Load Value</div>
                        </div>
                        <div class="driver-pay">
                            <span class="amount">$${(load.loadValue * 0.20).toLocaleString()}</span>
                            <div class="label">Driver Pay (20%)</div>
                        </div>
                    </div>
                    <div class="load-details">
                        <div>
                            <h4>Special Instructions</h4>
                            <p>${load.specialInstructions || 'No special instructions provided.'}</p>
                        </div>
                        <div class="driver-section">
                            <h4>${load.assignedDriver ? 'Assigned Driver' : 'Assign Driver'}</h4>
                            <select class="driver-select" onchange="assignDriver(${load.id}, this.value)">
                                <option value="">Select Driver</option>
                                ${drivers.map(driver => `
                                    <option value="${driver.name}" ${driver.name === load.assignedDriver ? 'selected' : ''}>${driver.name}</option>
                                `).join('')}
                            </select>
                        </div>
                        <div class="load-actions">
                            ${load.assignedDriver && !load.completed ? `<button class="btn-complete" onclick="completeLoadManager(${load.id})">Mark Complete</button>` : ''}
                            <button class="btn-delete" onclick="deleteLoad(${load.id})">Delete</button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function updatePayroll() {
            const container = document.getElementById('payrollContainer');
            const driverStats = {};
            
            // Calculate stats for each driver
            drivers.forEach(driver => {
                const driverLoads = loads.filter(load => load.assignedDriver === driver.name);
                const completedLoads = driverLoads.filter(load => load.completed);
                const totalEarned = completedLoads.reduce((sum, load) => sum + (load.loadValue * 0.20), 0);
                
                if (driverLoads.length > 0) {
                    driverStats[driver.name] = {
                        totalEarned,
                        loadCount: completedLoads.length,
                        totalLoads: driverLoads.length
                    };
                }
            });
            
            if (Object.keys(driverStats).length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>No driver assignments</h3>
                        <p>Assign drivers to loads to see payroll information</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = Object.entries(driverStats).map(([driverName, stats]) => `
                <div class="driver-card">
                    <div class="driver-name">${driverName}</div>
                    <div class="total-earned">$${stats.totalEarned.toLocaleString()}</div>
                    <div class="load-count">${stats.loadCount} completed / ${stats.totalLoads} assigned</div>
                    <div class="pay-date">Pay Date: ${getNextWednesday()}</div>
                </div>
            `).join('');
        }

        // Driver management functions
        function addDriver() {
            const name = document.getElementById('newDriverName').value.trim();
            const id = document.getElementById('newDriverId').value.trim();
            const phone = document.getElementById('newDriverPhone').value.trim();
            const email = document.getElementById('newDriverEmail').value.trim();
            const license = document.getElementById('newDriverLicense').value.trim();
            const startDate = document.getElementById('newDriverStartDate').value;

            if (!name || !id) {
                alert('Please fill in Driver Name and Driver ID (required fields)');
                return;
            }

            // Check if driver ID already exists
            if (drivers.some(driver => driver.id === id)) {
                alert('Driver ID already exists. Please use a unique ID.');
                return;
            }

            // Check if driver name already exists
            if (drivers.some(driver => driver.name === name)) {
                alert('Driver name already exists. Please use a different name.');
                return;
            }

            // Generate avatar initials
            const nameParts = name.split(' ');
            const avatar = nameParts.length >= 2 
                ? nameParts[0].charAt(0).toUpperCase() + nameParts[nameParts.length - 1].charAt(0).toUpperCase()
                : name.substring(0, 2).toUpperCase();

            const newDriver = {
                name,
                id,
                avatar,
                phone: phone || null,
                email: email || null,
                license: license || null,
                startDate: startDate || null
            };

            drivers.push(newDriver);
            updateDisplay();

            // Clear form
            document.getElementById('newDriverName').value = '';
            document.getElementById('newDriverId').value = '';
            document.getElementById('newDriverPhone').value = '';
            document.getElementById('newDriverEmail').value = '';
            document.getElementById('newDriverLicense').value = '';
            document.getElementById('newDriverStartDate').value = '';

            alert(`Driver "${name}" added successfully!`);
        }

        function editDriver(driverName) {
            const driver = drivers.find(d => d.name === driverName);
            if (!driver) return;

            const newName = prompt('Enter new name:', driver.name);
            if (newName === null) return; // User cancelled

            const newId = prompt('Enter new driver ID:', driver.id);
            if (newId === null) return; // User cancelled

            const newPhone = prompt('Enter phone number:', driver.phone || '');
            const newEmail = prompt('Enter email address:', driver.email || '');
            const newLicense = prompt('Enter license number:', driver.license || '');

            // Validate inputs
            if (!newName.trim() || !newId.trim()) {
                alert('Name and ID cannot be empty');
                return;
            }

            // Check for duplicates (excluding current driver)
            if (drivers.some(d => d.name !== driverName && d.name === newName.trim())) {
                alert('Driver name already exists');
                return;
            }

            if (drivers.some(d => d.name !== driverName && d.id === newId.trim())) {
                alert('Driver ID already exists');
                return;
            }

            // Update loads if name changed
            if (driver.name !== newName.trim()) {
                loads.forEach(load => {
                    if (load.assignedDriver === driver.name) {
                        load.assignedDriver = newName.trim();
                    }
                });
            }

            // Update driver
            driver.name = newName.trim();
            driver.id = newId.trim();
            driver.phone = newPhone.trim() || null;
            driver.email = newEmail.trim() || null;
            driver.license = newLicense.trim() || null;

            // Regenerate avatar if name changed
            const nameParts = driver.name.split(' ');
            driver.avatar = nameParts.length >= 2 
                ? nameParts[0].charAt(0).toUpperCase() + nameParts[nameParts.length - 1].charAt(0).toUpperCase()
                : driver.name.substring(0, 2).toUpperCase();

            updateDisplay();
            alert('Driver information updated successfully!');
        }

        function removeDriver(driverName) {
            const driver = drivers.find(d => d.name === driverName);
            if (!driver) return;

            const assignedLoads = loads.filter(load => load.assignedDriver === driverName);
            
            let confirmMessage = `Are you sure you want to remove driver "${driverName}"?`;
            if (assignedLoads.length > 0) {
                confirmMessage += `\n\nThis driver has ${assignedLoads.length} assigned load(s). These loads will be unassigned and become available.`;
            }

            if (confirm(confirmMessage)) {
                // Unassign all loads
                loads.forEach(load => {
                    if (load.assignedDriver === driverName) {
                        load.assignedDriver = '';
                        load.status = 'available';
                        load.completed = false;
                    }
                });

                // Remove driver
                drivers = drivers.filter(d => d.name !== driverName);
                
                updateDisplay();
                alert(`Driver "${driverName}" removed successfully!`);
            }
        }

        // Load management functions
        function addLoad() {
            const customer = document.getElementById('customerName').value.trim();
            const eventDate = document.getElementById('eventDate').value;
            const eventType = document.getElementById('eventType').value;
            const loadValue = parseFloat(document.getElementById('loadValue').value);
            const deliveryAddress = document.getElementById('deliveryAddress').value.trim();
            const setupSize = document.getElementById('setupSize').value;
            const specialInstructions = document.getElementById('specialInstructions').value.trim();

            if (!customer || !eventDate || !loadValue || !deliveryAddress) {
                alert('Please fill in all required fields (marked with *)');
                return;
            }

            if (loadValue <= 0) {
                alert('Load value must be greater than 0');
                return;
            }

            const newLoad = {
                id: nextLoadId++,
                customer,
                eventDate,
                eventType: eventType || 'Other',
                loadValue,
                deliveryAddress,
                setupSize: setupSize || 'Medium',
                specialInstructions,
                status: 'available',
                assignedDriver: '',
                completed: false
            };

            loads.push(newLoad);
            updateDisplay();

            // Clear form
            document.getElementById('customerName').value = '';
            document.getElementById('eventDate').value = '';
            document.getElementById('eventType').value = '';
            document.getElementById('loadValue').value = '';
            document.getElementById('deliveryAddress').value = '';
            document.getElementById('setupSize').value = '';
            document.getElementById('specialInstructions').value = '';

            alert('Load added successfully!');
            switchTab('loadboard');
        }

        function assignDriver(loadId, driverName) {
            const load = loads.find(l => l.id === loadId);
            if (load) {
                load.assignedDriver = driverName;
                load.status = driverName ? 'assigned' : 'available';
                updateDisplay();
            }
        }

        function acceptLoad(loadId) {
            const load = loads.find(l => l.id === loadId);
            if (load && userRole === 'driver') {
                load.assignedDriver = currentUser;
                load.status = 'assigned';
                updateDisplay();
                alert('Load accepted! Check "My Loads" tab to view your assignment.');
            }
        }

        function completeLoad(loadId) {
            const load = loads.find(l => l.id === loadId);
            if (load && load.assignedDriver === currentUser) {
                load.completed = true;
                load.status = 'completed';
                updateDisplay();
                alert('Load marked as complete! Earnings will be included in next Wednesday\'s pay.');
            }
        }

        function completeLoadManager(loadId) {
            const load = loads.find(l => l.id === loadId);
            if (load) {
                load.completed = true;
                load.status = 'completed';
                updateDisplay();
                alert('Load marked as complete!');
            }
        }

        function releaseLoad(loadId) {
            const load = loads.find(l => l.id === loadId);
            if (load) {
                load.assignedDriver = '';
                load.status = 'available';
                load.completed = false;
                updateDisplay();
                alert('Load released and is now available for other drivers.');
            }
        }

        function deleteLoad(loadId) {
            if (confirm('Are you sure you want to delete this load?')) {
                loads = loads.filter(l => l.id !== loadId);
                updateDisplay();
                alert('Load deleted successfully.');
            }
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(today.getDate() + 1);
            
            if (date.toDateString() === today.toDateString()) {
                return 'Today';
            } else if (date.toDateString() === tomorrow.toDateString()) {
                return 'Tomorrow';
            } else {
                return date.toLocaleDateString('en-US', { 
                    weekday: 'short', month: 'short', day: 'numeric'
                });
            }
        }

        // Initialize the application
        function init() {
            initializeSampleData();
        }

        // Start the application when page loads
        window.addEventListener('load', init);
    </script>
</body>
</html>
